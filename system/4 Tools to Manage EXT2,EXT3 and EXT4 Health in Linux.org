#+TITLE: 4个管理 EXT2,EXT3 以及 EXT4 健康状况的工具
#+URL: https://www.tecmint.com/manage-ext2-ext3-and-ext4-health-in-linux/
#+AUTHOR: lujun9972
#+TAGS: ext filesystem
#+DATE: [2017-11-07 二 14:31]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil


文件系统就是一种帮你决定数据如何存取的数据结构. 文件系统也可以看成是磁盘上的物理分区. 
在长时间的运行期间，如果缺乏妥善的维护和持续的监控, 可能会慢慢的被损坏.

造成文件系统损坏的因素有很多: 系统崩溃，硬件和软件的缺陷, 充满漏洞的驱动程序和应用程序, 不正确的调整, 大量数据的过载等等.

所有这些问题都可能导致Linux无法正确挂载（或者卸载）文件系统, 导致系统故障.

Read Also: [[https://www.tecmint.com/find-linux-filesystem-type/][7 Ways to Determine the File System Type in Linux (Ext2, Ext3 or Ext4)]]

而且, 让你的操作系统运行在受损的文件系统上可能导致其他运行时的错误,从而造成更多的数据损失. 
为了防止文件系统损坏，你需要关注它的健康状态.

本文中, 我们将会涉及到监控和维护 ext2, ext3 以及 ext4 文件系统的工具. 所有这些工具都需要root权限，因此请使用 [[https://www.tecmint.com/su-vs-sudo-and-how-to-configure-sudo-in-linux/][sudo命令]] 来运行它们.

* 查看 EXT2/EXT3/EXT4 文件系统的信息

dumpe2fs 是一个导出ext2/ext3/ext4文件系统信息的命令行工具,它会现实磁盘中文件系统的超级块以及块组的信息.

在运行 dumpe2fs 前, 请先运行 [[https://www.tecmint.com/how-to-check-disk-space-in-linux/][df -hT]] 命令来获取文件系统磁盘名.

#+BEGIN_SRC shell
  $ sudo dumpe2fs /dev/sda10
#+END_SRC

输出：
#+BEGIN_EXAMPLE
  dumpe2fs 1.42.13 (17-May-2015)
  Filesystem volume name:   
  Last mounted on:          /
  Filesystem UUID:          bb29dda3-bdaa-4b39-86cf-4a6dc9634a1b
  Filesystem magic number:  0xEF53
  Filesystem revision #:    1 (dynamic)
  Filesystem features:      has_journal ext_attr resize_inode dir_index filetype needs_recovery extent flex_bg sparse_super large_file huge_file uninit_bg dir_nlink extra_isize
  Filesystem flags:         signed_directory_hash 
  Default mount options:    user_xattr acl
  Filesystem state:         clean
  Errors behavior:          Continue
  Filesystem OS type:       Linux
  Inode count:              21544960
  Block count:              86154752
  Reserved block count:     4307737
  Free blocks:              22387732
  Free inodes:              21026406
  First block:              0
  Block size:               4096
  Fragment size:            4096
  Reserved GDT blocks:      1003
  Blocks per group:         32768
  Fragments per group:      32768
  Inodes per group:         8192
  Inode blocks per group:   512
  Flex block group size:    16
  Filesystem created:       Sun Jul 31 16:19:36 2016
  Last mount time:          Mon Nov  6 10:25:28 2017
  Last write time:          Mon Nov  6 10:25:19 2017
  Mount count:              432
  Maximum mount count:      -1
  Last checked:             Sun Jul 31 16:19:36 2016
  Check interval:           0 ()
  Lifetime writes:          2834 GB
  Reserved blocks uid:      0 (user root)
  Reserved blocks gid:      0 (group root)
  First inode:              11
  Inode size:           256
  Required extra isize:     28
  Desired extra isize:      28
  Journal inode:            8
  First orphan inode:       6947324
  Default directory hash:   half_md4
  Directory Hash Seed:      9da5dafb-bded-494d-ba7f-5c0ff3d9b805
  Journal backup:           inode blocks
  Journal features:         journal_incompat_revoke
  Journal size:             128M
  Journal length:           32768
  Journal sequence:         0x00580f0c
  Journal start:            12055
#+END_EXAMPLE

=-b= 参数会让dumpe2fs显示出文件系统中的保留块:

$ dumpe2fs -b

* 检查 EXT2/EXT3/EXT4 文件系统的错误

e2fsck 用于检查 ext2/ext3/ext4 文件系统是否有错误,并进行fsck检查,甚至可以 [[https://www.tecmint.com/defragment-linux-system-partitions-and-directories/][修复Linux文件系统]]; 
它基本上就是一系列文件系统检查器(fsck.fstype for example fsck.ext3, fsck.sfx 等)的一个前端界面.

记住，Linux会在系统启动时自动运行 e2fack/fsck 来检查配置在 =/etc/fstab= 中的分区. 
这通常发生在一个文件系统没有正常卸载的情况下.

注意: 不要在已挂载的文件系统上运行 e2fsck 和 fsck, 请一定记得先卸载这些分区.

#+BEGIN_SRC shell
  $ sudo unmount /dev/sda10
  $ sudo fsck /dev/sda10
#+END_SRC

你还可以使用 =-V= 来现实详细信息并使用 =-t= 来指定文件系统的类型:

#+BEGIN_SRC shell
  $ sudo fsck -Vt ext4 /dev/sda10
#+END_SRC

* 调整 EXT2/EXT3/EXT4 文件系统

我们一开始就提到，不正确的调整是导致文件系统损坏的一大原因. 你可以使用 =tune2fs= 工具来更改 ext2/ext3/ext4 文件系统中的某些参数, 这些参数我们会在后面细说.

使用 =-l= 选项可以看到文件系统超级块的内容, 包括各参数的当前值.

#+BEGIN_SRC shell
  $ sudo tune2fs -l /dev/sda10
#+END_SRC

输出为

#+BEGIN_EXAMPLE
  tune2fs 1.42.13 (17-May-2015)
  Filesystem volume name:   
  Last mounted on:          /
  Filesystem UUID:          bb29dda3-bdaa-4b39-86cf-4a6dc9634a1b
  Filesystem magic number:  0xEF53
  Filesystem revision #:    1 (dynamic)
  Filesystem features:      has_journal ext_attr resize_inode dir_index filetype needs_recovery extent flex_bg sparse_super large_file huge_file uninit_bg dir_nlink extra_isize
  Filesystem flags:         signed_directory_hash 
  Default mount options:    user_xattr acl
  Filesystem state:         clean
  Errors behavior:          Continue
  Filesystem OS type:       Linux
  Inode count:              21544960
  Block count:              86154752
  Reserved block count:     4307737
  Free blocks:              22387732
  Free inodes:              21026406
  First block:              0
  Block size:               4096
  Fragment size:            4096
  Reserved GDT blocks:      1003
  Blocks per group:         32768
  Fragments per group:      32768
  Inodes per group:         8192
  Inode blocks per group:   512
  Flex block group size:    16
  Filesystem created:       Sun Jul 31 16:19:36 2016
  Last mount time:          Mon Nov  6 10:25:28 2017
  Last write time:          Mon Nov  6 10:25:19 2017
  Mount count:              432
  Maximum mount count:      -1
  Last checked:             Sun Jul 31 16:19:36 2016
  Check interval:           0 ()
  Lifetime writes:          2834 GB
  Reserved blocks uid:      0 (user root)
  Reserved blocks gid:      0 (group root)
  First inode:              11
  Inode size:           256
  Required extra isize:     28
  Desired extra isize:      28
  Journal inode:            8
  First orphan inode:       6947324
  Default directory hash:   half_md4
  Directory Hash Seed:      9da5dafb-bded-494d-ba7f-5c0ff3d9b805
  Journal backup:           inode blocks
#+END_EXAMPLE

使用 =-c= 选项可以设置一个挂载次数，文件系统挂载次数超过这个次数的话，就会使用 e2fsck 来对这个文件系统进行检查了. 
下面的命令就是要求系统 =/dev/sda10= 在每挂载4次后都运行 =e2fsck= 检查一边.

#+BEGIN_EXAMPLE
  $ sudo tune2fs -c 4 /dev/sda10
  tune2fs 1.42.13 (17-May-2015)
  Setting maximal mount count to 4
#+END_EXAMPLE

你也可以使用 =-i= 选项指定两次文件系统检查的间隔时间. 
下面命令设置文件系统两次检查的间隔时间为2天.

#+BEGIN_EXAMPLE
  $ sudo tune2fs  -i  2d  /dev/sda10
  tune2fs 1.42.13 (17-May-2015)
  Setting interval between checks to 172800 seconds
#+END_EXAMPLE

再次运行下面命令，你会发现 =/dev/sda10= 文件系统检查的间隔时间已经被修改了.

#+BEGIN_SRC shell
  $ sudo tune2fs -l /dev/sda10
#+END_SRC

Sample Output

#+BEGIN_EXAMPLE
  Filesystem created:       Sun Jul 31 16:19:36 2016
  Last mount time:          Mon Nov  6 10:25:28 2017
  Last write time:          Mon Nov  6 13:49:50 2017
  Mount count:              432
  Maximum mount count:      4
  Last checked:             Sun Jul 31 16:19:36 2016
  Check interval:           172800 (2 days)
  Next check after:         Tue Aug  2 16:19:36 2016
  Lifetime writes:          2834 GB
  Reserved blocks uid:      0 (user root)
  Reserved blocks gid:      0 (group root)
  First inode:              11
  Inode size:           256
  Required extra isize:     28
  Desired extra isize:      28
  Journal inode:            8
  First orphan inode:       6947324
  Default directory hash:   half_md4
  Directory Hash Seed:      9da5dafb-bded-494d-ba7f-5c0ff3d9b805
  Journal backup:           inode blocks
#+END_EXAMPLE

使用 =-J= 选项可以修改默认的日志参数. 该选项下面还有子选项: =size=journal-size= (设置日志的大小), =device=external-journal= (指定日志存放在哪个磁盘上) 以及 =location=journal-location= (定义日志的位置).

注意，为一个文件系统设置日志参数时, =size= 和 =device= 只能选一个:

#+BEGIN_SRC shell
  $ sudo tune2fs -J size=4MB /dev/sda10
#+END_SRC

最后, 你还可以使用 =-L= 选项来设置文件系统的标签.

#+BEGIN_SRC shell
  $ sudo tune2fs -L "ROOT" /dev/sda10
#+END_SRC

* 调试 EXT2/EXT3/EXT4 文件系统

debugfs 是一款简单的, 可互式的,基于命令行的 ext2/ext3/ext4 文件系统调试器. 它允许你交互式地调整文件系统. 
按 “?” 可以查看子命令和请求的说明.

#+BEGIN_SRC shell
  $ sudo debugfs /dev/sda10
#+END_SRC

默认情况下, 文件系统以读写模式打开, 但也可以使用 =-w= 标志开指定以读写模式打开. 使用 =-c= 选项指定以 catastrophic 模式打开.

Sample Output

#+BEGIN_EXAMPLE
  debugfs 1.42.13 (17-May-2015)
  debugfs:  ?
  Available debugfs requests:
  show_debugfs_params, params
  Show debugfs parameters
  open_filesys, open       Open a filesystem
  close_filesys, close     Close the filesystem
  freefrag, e2freefrag     Report free space fragmentation
  feature, features        Set/print superblock features
  dirty_filesys, dirty     Mark the filesystem as dirty
  init_filesys             Initialize a filesystem (DESTROYS DATA)
  show_super_stats, stats  Show superblock statistics
  ncheck                   Do inode->name translation
  icheck                   Do block->inode translation
  change_root_directory, chroot
  ....
#+END_EXAMPLE

显示可用的空间碎片,使用 freefrag 请求, like so.

#+BEGIN_SRC shell
  debugfs: freefrag
#+END_SRC

输出为

#+BEGIN_EXAMPLE
  Device: /dev/sda10
  Blocksize: 4096 bytes
  Total blocks: 86154752
  Free blocks: 22387732 (26.0%)
  Min. free extent: 4 KB 
  Max. free extent: 2064256 KB
  Avg. free extent: 2664 KB
  Num. free extent: 33625
  HISTOGRAM OF FREE EXTENT SIZES:
  Extent Size Range :  Free extents   Free Blocks  Percent
  4K...    8K-  :          4883          4883    0.02%
  8K...   16K-  :          4029          9357    0.04%
  16K...   32K-  :          3172         15824    0.07%
  32K...   64K-  :          2523         27916    0.12%
  64K...  128K-  :          2041         45142    0.20%
  128K...  256K-  :          2088         95442    0.43%
  256K...  512K-  :          2462        218526    0.98%
  512K... 1024K-  :          3175        571055    2.55%
  1M...    2M-  :          4551       1609188    7.19%
  2M...    4M-  :          2870       1942177    8.68%
  4M...    8M-  :          1065       1448374    6.47%
  8M...   16M-  :           364        891633    3.98%
  16M...   32M-  :           194        984448    4.40%
  32M...   64M-  :            86        873181    3.90%
  64M...  128M-  :            77       1733629    7.74%
  128M...  256M-  :            11        490445    2.19%
  256M...  512M-  :            10        889448    3.97%
  512M... 1024M-  :             2        343904    1.54%
  1G...    2G-  :            22      10217801   45.64%
  debugfs:  
#+END_EXAMPLE

你可以试试其他的请求命令,比如创建/删除文件和目录, 更改当前工作目录等等, 每个命令都有一些简单的描述. 想退出 debugfs 的话, 直接使用 =q= 请求即可.

这就是所有内容了! 下面是我们收集的一些相关的文章, 你们可能用得着.

文件系统使用信息:

 1. [[https://www.tecmint.com/how-to-check-disk-space-in-linux/][12 Useful “df” Commands to Check Disk Space in Linux]]
 2. [[https://www.tecmint.com/pyd-command-to-check-disk-usage/][Pydf an Alternative “df” Command to Check Disk Usage in Different Colours]]
 3. [[https://www.tecmint.com/check-linux-disk-usage-of-files-and-directories/][10 Useful du (Disk Usage) Commands to Find Disk Usage of Files and Directories]]

检查磁盘或分区的健康状况:

 1. [[https://www.tecmint.com/linux-disk-scanning-tools/][3 Useful GUI and Terminal Based Linux Disk Scanning Tools]]
 2. [[https://www.tecmint.com/check-linux-hard-disk-bad-sectors-bad-blocks/][How to Check Bad Sectors or Bad Blocks on Hard Disk in Linux]]
 3. [[https://www.tecmint.com/defragment-linux-system-partitions-and-directories/][How to Repair and Defragment Linux System Partitions and Directories]]

保持一个健康的文件系统有助于提高Linux系统的性能. 任何问题或想法都欢迎提出.
