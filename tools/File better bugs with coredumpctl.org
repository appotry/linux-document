#+TITLE: 使用coredumpctl帮你定位bug
#+URL: https://fedoramagazine.org/file-better-bugs-coredumpctl/
#+AUTHOR: lujun9972
#+TAGS: core fedoral
#+DATE: [2017-11-14 二 22:56]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil


人生一大不幸就是所有软件都有bug, 有些bug还能让系统崩溃. 当崩溃产生时通常会产生一个名为 =core= 文件的数据文件. 
该文件包含崩溃时的系统数据, 可以帮助我们探查崩溃产生的原因. 
通常开发人员需要 backtrace 的数据来找到导致崩溃的指令流程. 它可以帮助开发人员修复bug,改进系统.
下面让我们看看在软件崩溃时生成 backtrace 的简单方法.

* coredumpctl入门

大多数 Fedora 系统都使用 [[https://github.com/abrt/abrt][Automatic Bug Reporting Tool (ABRT)]] 来自动在系统崩溃时捕获dump文件.
然而, 若你禁用了该服务或者删除了相关包, 那么这里说的方法就有用了.

系统崩溃后, 首先要保证你运行的是最新升级的软件. 升级通常会修复已知可能导致验证错误和崩溃的bug.
升级完后, 尝试重现一下导致bug的场景.

如果依然崩溃, 或者你运行的本来就是最新的软件, 那么就可以使用 =coredumpctl= 这个工具了. 该工具会帮助定位和处理崩溃.
要查看系统中的所有core dumps可以运行下面命令:

#+BEGIN_SRC shell
  coredumpctl list
#+END_SRC

不要被它的长度所吓到. 有些系统组件只是静静的在幕后崩溃,然后自己又恢复了.
可以使用 =-since= 参数来过滤出今天产生的dump:

#+BEGIN_SRC shell
  coredumpctl list --since=today
#+END_SRC

其中 PID 列包含了标识dump的ID号. 请记住这个编号, 你会在后面再次用到. 如果你不想去记它, 可以用一个变量来保存:

#+BEGIN_SRC shell
  MYPID=<PID>
#+END_SRC

要查看core dump的信息, 使用下面命令:

#+BEGIN_SRC shell
  coredumpctl info $MYPID
#+END_SRC

* 安装 debuginfo 包

Debugging symbols 将core dump中的数据翻译成源码中的指令. 而这个 symbol 数据可能非常大.
因此, symbols 独立存放在 debuginfo 包中而不会包含在我们常用的那些包中. 
使用下面命令可以决定应该安装哪个 debuginfo 包:

#+BEGIN_SRC shell
  coredumpctl gdb $MYPID
#+END_SRC

这条命令会显示很多内容. 如果缺少 debuginfo 包,最后那行信息会告诉你应该用 dnf 来安装那些 debuginfo 包.
使用 [[https://fedoramagazine.org/howto-use-sudo/][sudo]] 运行下面命令:

#+BEGIN_SRC shell
  sudo dnf debuginfo-install <packages...>
#+END_SRC

然后再试着运行一次 =coredumpctl gdb $MYPID=. 若trace中还有未知的symbol,你可能还会需要重复上一步骤.

* 捕获 backtrace

运行下面命令来记录调试器中的信息:

#+BEGIN_SRC shell
  set logging file mybacktrace.txt
  set logging on
#+END_SRC

有时可能需要关闭 =pagination= 项. 当处理很长的 backtraces 时这会节省很多时间.

#+BEGIN_SRC shell
  set pagination off
#+END_SRC

然后运行 backtrace:

#+BEGIN_SRC shell
  thread apply all bt full
#+END_SRC

现在可以输入 =quit= 来退出调试器了. 在 =mybacktrace.txt= 文件中包含了与bug有关的 backtrace 信息.当然你也可以直接把文件内容上传到 pastebin 上去.
不管怎样, 你都可以为开发者解决问题提供更多的帮助了.
