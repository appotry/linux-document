#+TITLE: How to use cron in Linux
#+URL: https://opensource.com/article/17/11/how-use-cron-linux
#+AUTHOR: lujun9972
#+TAGS: crontab
#+DATE: [2017-11-07 二 09:29]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil


作为一名系统管理员, 面临的一个挑战就是需要在睡觉的点去跑任务. 
比如，有些任务(包括周期性的任务)需要在大半夜或周末运行, 因为这个点没什么人会去使用计算机资源.
我不想在非工作时间浪费时间去运行那些命令和脚本. 我也不想大半夜的起来去做悲愤和升级.

我使用两个工具来帮助我在预先定义好的时间运行命令,程序和任务.  [[https://en.wikipedia.org/wiki/Cron][cron]] 和 at 服务允许系统管理员安排好在指定的时间要运行的任务. 
at u服务指定单次的任务. 而 cron 服务可以设定重复性的任务, 比如日任务, 周任务, 月任务.

本文, 我会介绍一下 cron 服务，以及它的使用方法.

* Common (and uncommon) cron uses

我使用 cron 服务来规划琐事, 比如每天凌晨2点要做的日常备份. 我也会用它来做一些不那么琐碎的事情.

+ 我多台电脑的系统时间(也就是操作系统的时间)使用 Network Time Protocol (NTP)来同步时间. 
  然而 NTP 只会设置系统时间,不会设置硬件时间,这会造成时间的漂移. 因此我使用cron来根据系统时间设置硬件时间.
+ 我每个月月初都会运行一个Bash程序来在每台机上创建新的"message of the day" (MOTD). 
  这条消息中包含诸如当前磁盘利用率之类的信息.
+ 很多系统进程和系统服务, 比如 [[https://sourceforge.net/projects/logwatch/files/][Logwatch]], [[https://github.com/logrotate/logrotate][logrotate]], 以及 [[http://rkhunter.sourceforge.net/][Rootkit Hunter]], 都是使用cron服务来规划任务，每天运行程序的.

crond守护进程就是提供cron功能的后台服务进程.

cron 服务会检查 =/var/spool/cron= 和 =/etc/cron.d= 目录中的文件,以及 =/etc/anacrontab= 这个文件. 
这些文件的内容定义了不同间隔时间内要运行的cron jobs. =/var/spool/cron= 中存放的是个人用户定义的cron job文件, 而系统服务和应用产生的cron job文件存放在 =/etc/cron.d= 目录中.
而 =/etc/anacrontab= 是一个很特别的存在，后面再说.

* Using crontab

cron会运行cron table (crontab)中定义的那些命令. 每个用户, 包括root, 都有一个cron文件. 
这些文件默认并不存在, 但是可以使用 =crontab -e= 命令来创建或修改,创建的文件存放在 =/var/spool/cron= 目录中. 
我强烈建议不要用标准编辑器(比如Vi, Vim, Emacs, Nano, 或者其他一些编辑器). 
crontab 不仅允许你编辑要定时运行的命令, 还会在你保存退出编辑器后重启crond守护进程.
crontab命令使用vi作为默认编辑器,因为几乎所有的linux系统都装有Vi.

新的 cron 文件是空的, 必须从头添加命令. 我将下面job定义的示例添加到cron文件中, 用来做个参考, 这样方便知道命令各部分的意义.
你也可以这样做.

#+BEGIN_EXAMPLE
  # crontab -e
  SHELL=/bin/bash
  MAILTO=root@example.com
  PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
  # For details see man 4 crontabs
  # Example of job definition:
  # .---------------- minute (0 - 59)
  # |  .------------- hour (0 - 23)
  # |  |  .---------- day of month (1 - 31)
  # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
  # |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
  # |  |  |  |  |
  # *  *  *  *  * user-name  command to be executed
  # backup using the rsbu program to the internal 4TB HDD and then 4TB external
  01 01 * * * /usr/local/bin/rsbu -vbd1 ; /usr/local/bin/rsbu -vbd2
  # Set the hardware clock to keep it in sync with the more accurate system clock
  03 05 * * * /sbin/hwclock --systohc
  # Perform monthly updates on the first of the month
  # 25 04 1 * * /usr/bin/dnf -y update
                                         ^The crontab command is used to view or edit the cron files.                                       
#+END_EXAMPLE

代码前三行设置默认的环境. 设置环境是必须的,因此 cron 本身并不提供任何环境. 
=SHELL= 变量指定了命令执行时使用的shell. 本例中指定为 Bash shell. 
=MAILTO= 变量设置了cron job结果发送到哪个邮件地址. 这些邮件的内容包括cron job的状态(backups, updates等)以及程序的输出.
第三行设置了环境的 =PATH= 变量. 不过虽然有在这设置路径，我依然总是为每个执行文件指明完整的路径.

上例中还有很多注释行,详细说明了定义cron job的语法. 我会一一讲解这些命令,然后再向你展示一些cron文件中的高级功能.

#+BEGIN_EXAMPLE
  01 01 * * * /usr/local/bin/rsbu -vbd1 ; /usr/local/bin/rsbu -vbd2
                              ^这行运行脚本进行系统备份.
#+END_EXAMPLE

该行u运行我自己写的一个 Bash shell 脚本, rsbuthat, 来做系统备份. 该工作开始于每天的 1:01 a.m. (01 01).
时间指示部分的第3,4,5位的星号(*)与文件通配符类似,表示每天，每月，每周; 该行会备份两次; 一份备份到内置硬盘,一份备份到外置U盘,然后放到安全的地方保存.

下面命令根据系统时钟设置硬件时钟. 每天的 5:03 a.m. (03 05) 运行.

#+BEGIN_EXAMPLE
  03 05 * * * /sbin/hwclock --systohc
                                   ^该行根据系统时钟设置硬件时钟.
#+END_EXAMPLE

我曾经使用第三行也是最后一个 cron job (现在已经注释掉了) 来在每月一号的04:25 a.m来做一次dnf/yum升级, 不过我把他注释掉了不再运行.

#+BEGIN_EXAMPLE
  # 25 04 1 * * /usr/bin/dnf -y update
  ^This line used to perform a monthly update, but I've commented it out.
#+END_EXAMPLE

* Other scheduling tricks

Now let's do some things that are a little more interesting than these basics. Suppose you want to run a particular job every Thursday at
3 p.m.:

#+BEGIN_EXAMPLE
  00 15 * * Thu /usr/local/bin/mycronjob.sh
                                            ^This line runs mycronjob.sh every Thursday at 3 p.m.                                           
#+END_EXAMPLE
#+BEGIN_SRC sh

#+END_SRC

Or, maybe you need to run quarterly reports after the end of each quarter. The cron service has no option for "The last day of the month,"
so instead you can use the first day of the following month, as shown below. (This assumes that the data needed for the reports will be
ready when the job is set to run.)

#+BEGIN_EXAMPLE
  02 03 1 1,4,7,10 * /usr/local/bin/reports.sh
                          ^This cron job runs quarterly reports on the first day of the month after a quarter ends.                         
#+END_EXAMPLE

The following shows a job that runs one minute past every hour between 9:01 a.m. and 5:01 p.m.

#+BEGIN_EXAMPLE
  01 09-17 * * * /usr/local/bin/hourlyreminder.sh
                                ^Sometimes you want to run jobs at regular times during normal business hours.                              
#+END_EXAMPLE

I have encountered situations where I need to run a job every two, three, or four hours. That can be accomplished by dividing the hours by
the desired interval, such as */3 for every three hours, or 6-18/3 to run every three hours between 6 a.m. and 6 p.m. Other intervals can
be divided similarly; for example, the expression */15 in the minutes position means "run the job every 15 minutes."

#+BEGIN_EXAMPLE
  ,*/5 08-18/2 * * * /usr/local/bin/mycronjob.sh
                            ^This cron job runs every five minutes during every hour between 8 a.m. and 5:58 p.m.                           
#+END_EXAMPLE

One thing to note: The division expressions must result in a remainder of zero for the job to run. That's why, in this example, the job is
set to run every five minutes (08:05, 08:10, 08:15, etc.) during even-numbered hours from 8 a.m. to 6 p.m., but not during any
odd-numbered hours. For example, the job will not run at all from 9 p.m. to 9:59 a.m.

I am sure you can come up with many other possibilities based on these examples.

* Limiting cron access

Regular users with cron access could make mistakes that, for example, might cause system resources (such as memory and CPU time) to be
swamped. To prevent possible misuse, the sysadmin can limit user access by creating a /etc/cron.allow file that contains a list of all
users with permission to create cron jobs. The root user cannot be prevented from using cron.

By preventing non-root users from creating their own cron jobs, it may be necessary for root to add their cron jobs to the root crontab.
"But wait!" you say. "Doesn't that run those jobs as root?" Not necessarily. In the first example in this article, the username field
shown in the comments can be used to specify the user ID a job is to have when it runs. This prevents the specified non-root user's jobs
from running as root. The following example shows a job definition that runs a job as the user "student":

#+BEGIN_EXAMPLE
  04 07 * * * student /usr/local/bin/mycronjob.sh
#+END_EXAMPLE

If no user is specified, the job is run as the user that owns the crontab file, root in this case.

* cron.d

The directory /etc/cron.d is where some applications, such as [[http://spamassassin.apache.org/][SpamAssassin]] and [[https://github.com/sysstat/sysstat][sysstat]], install cron files. Because there is no
spamassassin or sysstat user, these programs need a place to locate cron files, so they are placed in /etc/cron.d.

The /etc/cron.d/sysstat file below contains cron jobs that relate to system activity reporting (SAR). These cron files have the same
format as a user cron file.

#+BEGIN_EXAMPLE
  # Run system activity accounting tool every 10 minutes
  ,*/10 * * * * root /usr/lib64/sa/sa1 1 1
  # Generate a daily summary of process accounting at 23:53
  53 23 * * * root /usr/lib64/sa/sa2 -A
                           ^The sysstat package installs the /etc/cron.d/sysstat cron file to run programs for SAR.                         
#+END_EXAMPLE

The sysstat cron file has two lines that perform tasks. The first line runs the sa1 program every 10 minutes to collect data stored in
special binary files in the /var/log/sa directory. Then, every night at 23:53, the sa2 program runs to create a daily summary.

* Scheduling tips

Some of the times I set in the crontab files seem rather random—and to some extent they are. Trying to schedule cron jobs can be
challenging, especially as the number of jobs increases. I usually have only a few tasks to schedule on each of my computers, which is
simpler than in some of the production and lab environments where I have worked.

One system I administered had around a dozen cron jobs that ran every night and an additional three or four that ran on weekends or the
first of the month. That was a challenge, because if too many jobs ran at the same time—especially the backups and compiles—the system
would run out of RAM and nearly fill the swap file, which resulted in system thrashing while performance tanked, so nothing got done. We
added more memory and improved how we scheduled tasks. We also removed a task that was very poorly written and used large amounts of
memory.

The crond service assumes that the host computer runs all the time. That means that if the computer is turned off during a period when
cron jobs were scheduled to run, they will not run until the next time they are scheduled. This might cause problems if they are critical
cron jobs. Fortunately, there is another option for running jobs at regular intervals: anacron.

* anacron

The [[https://en.wikipedia.org/wiki/Anacron][anacron]] program performs the same function as crond, but it adds the ability to run jobs that were skipped, such as if the computer
was off or otherwise unable to run the job for one or more cycles. This is very useful for laptops and other computers that are turned off
or put into sleep mode.

As soon as the computer is turned on and booted, anacron checks to see whether configured jobs missed their last scheduled run. If they
have, those jobs run immediately, but only once (no matter how many cycles have been missed). For example, if a weekly job was not run for
three weeks because the system was shut down while you were on vacation, it would be run soon after you turn the computer on, but only
once, not three times.

The anacron program provides some easy options for running regularly scheduled tasks. Just install your scripts in the /etc/cron.[hourly|
daily|weekly|monthly] directories, depending how frequently they need to be run.

How does this work? The sequence is simpler than it first appears.

 1. The crond service runs the cron job specified in /etc/cron.d/0hourly.

    #+BEGIN_EXAMPLE
      # Run the hourly jobs
      SHELL=/bin/bash
      PATH=/sbin:/bin:/usr/sbin:/usr/bin
      MAILTO=root
      01 * * * * root run-parts /etc/cron.hourly
                           ^The contents of /etc/cron.d/0hourly cause the shell scripts located in /etc/cron.hourly to run.                     
    #+END_EXAMPLE

 2. The cron job specified in /etc/cron.d/0hourly runs the run-parts program once per hour.
 3. The run-parts program runs all the scripts located in the /etc/cron.hourly directory.
 4. The /etc/cron.hourly directory contains the 0anacron script, which runs the anacron program using the /etdc/anacrontab configuration
    file shown here.

    #+BEGIN_EXAMPLE
      # /etc/anacrontab: configuration file for anacron
      # See anacron(8) and anacrontab(5) for details.
      SHELL=/bin/sh
      PATH=/sbin:/bin:/usr/sbin:/usr/bin
      MAILTO=root
      # the maximal random delay added to the base delay of the jobs
      RANDOM_DELAY=45
      # the jobs will be started during the following hours only
      START_HOURS_RANGE=3-22
      #period in days   delay in minutes   job-identifier   command
      1       5       cron.daily              nice run-parts /etc/cron.daily
      7       25      cron.weekly             nice run-parts /etc/cron.weekly
      @monthly 45     cron.monthly            nice run-parts /etc/cron.monthly

    #+END_EXAMPLE

    ^The contents of /etc/anacrontab file runs the executable files in the cron.[daily|weekly|monthly] directories at the appropriate times. 

 5. The anacron program runs the programs located in /etc/cron.daily once per day; it runs the jobs located in /etc/cron.weekly once per
    week, and the jobs in cron.monthly once per month. Note the specified delay times in each line that help prevent these jobs from
    overlapping themselves and other cron jobs.

Instead of placing complete Bash programs in the cron.X directories, I install them in the /usr/local/bin directory, which allows me to
run them easily from the command line. Then I add a symlink in the appropriate cron directory, such as /etc/cron.daily.

The anacron program is not designed to run programs at specific times. Rather, it is intended to run programs at intervals that begin at
the specified times, such as 3 a.m. (see the START_HOURS_RANGE line in the script just above) of each day, on Sunday (to begin the week),
and on the first day of the month. If any one or more cycles are missed, anacron will run the missed jobs once, as soon as possible.

* More on setting limits

I use most of these methods for scheduling tasks to run on my computers. All those tasks are ones that need to run with root privileges.
It's rare in my experience that regular users really need a cron job. One case was a developer user who needed a cron job to kick off a
daily compile in a development lab.

It is important to restrict access to cron functions by non-root users. However, there are circumstances when a user needs to set a task
to run at pre-specified times, and cron can allow them to do that. Many users do not understand how to properly configure these tasks
using cron and they make mistakes. Those mistakes may be harmless, but, more often than not, they can cause problems. By setting
functional policies that cause users to interact with the sysadmin, individual cron jobs are much less likely to interfere with other
users and other system functions.

It is possible to set limits on the total resources that can be allocated to individual users or groups, but that is an article for
another time.

For more information, the man pages for [[http://man7.org/linux/man-pages/man8/cron.8.html][cron]], [[http://man7.org/linux/man-pages/man5/crontab.5.html][crontab]], [[http://man7.org/linux/man-pages/man8/anacron.8.html][anacron]], [[http://man7.org/linux/man-pages/man5/anacrontab.5.html][anacrontab]], and [[http://manpages.ubuntu.com/manpages/zesty/man8/run-parts.8.html][run-parts]] all have excellent information and descriptions
of how the cron system works.
