#+TITLE: How to use cron in Linux
#+URL: https://opensource.com/article/17/11/how-use-cron-linux
#+AUTHOR: lujun9972
#+TAGS: crontab
#+DATE: [2017-11-07 二 09:29]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil


作为一名系统管理员, 面临的一个挑战就是需要在睡觉的点去跑任务. 
比如，有些任务(包括周期性的任务)需要在大半夜或周末运行, 因为这个点没什么人会去使用计算机资源.
我不想在非工作时间浪费时间去运行那些命令和脚本. 我也不想大半夜的起来去做悲愤和升级.

我使用两个工具来帮助我在预先定义好的时间运行命令,程序和任务.  [[https://en.wikipedia.org/wiki/Cron][cron]] 和 at 服务允许系统管理员安排好在指定的时间要运行的任务. 
at u服务指定单次的任务. 而 cron 服务可以设定重复性的任务, 比如日任务, 周任务, 月任务.

本文, 我会介绍一下 cron 服务，以及它的使用方法.

* Common (and uncommon) cron uses

我使用 cron 服务来规划琐事, 比如每天凌晨2点要做的日常备份. 我也会用它来做一些不那么琐碎的事情.

+ 我多台电脑的系统时间(也就是操作系统的时间)使用 Network Time Protocol (NTP)来同步时间. 
  然而 NTP 只会设置系统时间,不会设置硬件时间,这会造成时间的漂移. 因此我使用cron来根据系统时间设置硬件时间.
+ 我每个月月初都会运行一个Bash程序来在每台机上创建新的"message of the day" (MOTD). 
  这条消息中包含诸如当前磁盘利用率之类的信息.
+ 很多系统进程和系统服务, 比如 [[https://sourceforge.net/projects/logwatch/files/][Logwatch]], [[https://github.com/logrotate/logrotate][logrotate]], 以及 [[http://rkhunter.sourceforge.net/][Rootkit Hunter]], 都是使用cron服务来规划任务，每天运行程序的.

crond守护进程就是提供cron功能的后台服务进程.

cron 服务会检查 =/var/spool/cron= 和 =/etc/cron.d= 目录中的文件,以及 =/etc/anacrontab= 这个文件. 
这些文件的内容定义了不同间隔时间内要运行的cron jobs. =/var/spool/cron= 中存放的是个人用户定义的cron job文件, 而系统服务和应用产生的cron job文件存放在 =/etc/cron.d= 目录中.
而 =/etc/anacrontab= 是一个很特别的存在，后面再说.

* Using crontab

cron会运行cron table (crontab)中定义的那些命令. 每个用户, 包括root, 都有一个cron文件. 
这些文件默认并不存在, 但是可以使用 =crontab -e= 命令来创建或修改,创建的文件存放在 =/var/spool/cron= 目录中. 
我强烈建议不要用标准编辑器(比如Vi, Vim, Emacs, Nano, 或者其他一些编辑器). 
crontab 不仅允许你编辑要定时运行的命令, 还会在你保存退出编辑器后重启crond守护进程.
crontab命令使用vi作为默认编辑器,因为几乎所有的linux系统都装有Vi.

新的 cron 文件是空的, 必须从头添加命令. 我将下面job定义的示例添加到cron文件中, 用来做个参考, 这样方便知道命令各部分的意义.
你也可以这样做.

#+BEGIN_EXAMPLE
  # crontab -e
  SHELL=/bin/bash
  MAILTO=root@example.com
  PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
  # For details see man 4 crontabs
  # Example of job definition:
  # .---------------- minute (0 - 59)
  # |  .------------- hour (0 - 23)
  # |  |  .---------- day of month (1 - 31)
  # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
  # |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
  # |  |  |  |  |
  # *  *  *  *  * user-name  command to be executed
  # backup using the rsbu program to the internal 4TB HDD and then 4TB external
  01 01 * * * /usr/local/bin/rsbu -vbd1 ; /usr/local/bin/rsbu -vbd2
  # Set the hardware clock to keep it in sync with the more accurate system clock
  03 05 * * * /sbin/hwclock --systohc
  # Perform monthly updates on the first of the month
  # 25 04 1 * * /usr/bin/dnf -y update
                                         ^The crontab command is used to view or edit the cron files.                                       
#+END_EXAMPLE

代码前三行设置默认的环境. 设置环境是必须的,因此 cron 本身并不提供任何环境. 
=SHELL= 变量指定了命令执行时使用的shell. 本例中指定为 Bash shell. 
=MAILTO= 变量设置了cron job结果发送到哪个邮件地址. 这些邮件的内容包括cron job的状态(backups, updates等)以及程序的输出.
第三行设置了环境的 =PATH= 变量. 不过虽然有在这设置路径，我依然总是为每个执行文件指明完整的路径.

上例中还有很多注释行,详细说明了定义cron job的语法. 我会一一讲解这些命令,然后再向你展示一些cron文件中的高级功能.

#+BEGIN_EXAMPLE
  01 01 * * * /usr/local/bin/rsbu -vbd1 ; /usr/local/bin/rsbu -vbd2
                              ^这行运行脚本进行系统备份.
#+END_EXAMPLE

该行u运行我自己写的一个 Bash shell 脚本, rsbuthat, 来做系统备份. 该工作开始于每天的 1:01 a.m. (01 01).
时间指示部分的第3,4,5位的星号(*)与文件通配符类似,表示每天，每月，每周; 该行会备份两次; 一份备份到内置硬盘,一份备份到外置U盘,然后放到安全的地方保存.

下面命令根据系统时钟设置硬件时钟. 每天的 5:03 a.m. (03 05) 运行.

#+BEGIN_EXAMPLE
  03 05 * * * /sbin/hwclock --systohc
                                   ^该行根据系统时钟设置硬件时钟.
#+END_EXAMPLE

我曾经使用第三行也是最后一个 cron job (现在已经注释掉了) 来在每月一号的04:25 a.m来做一次dnf/yum升级, 不过我把他注释掉了不再运行.

#+BEGIN_EXAMPLE
  # 25 04 1 * * /usr/bin/dnf -y update
  ^This line used to perform a monthly update, but I've commented it out.
#+END_EXAMPLE

* Other scheduling tricks

现在让我们尝试一些更有趣的事. 假设你需要在每个周二的3 p.m运行某个特定的任务:

#+BEGIN_EXAMPLE
  00 15 * * Thu /usr/local/bin/mycronjob.sh
                                            ^该行在每周二下午3点运行 mycronjob.sh                                           
#+END_EXAMPLE

或者你需要在季末运行一份季度报表. 而cron服务没有办法直接表示"月份的最后一天",因此你需要使用后一个月的第一天来代替. (这里假设job运行时,报表的数据已经准备好了)

#+BEGIN_EXAMPLE
  02 03 1 1,4,7,10 * /usr/local/bin/reports.sh
                          ^This cron job runs quarterly reports on the first day of the month after a quarter ends.                         
#+END_EXAMPLE

下面一行会在9:01 a.m到5:01 p.m之间每小时过1分钟的时候运行命令.

#+BEGIN_EXAMPLE
  01 09-17 * * * /usr/local/bin/hourlyreminder.sh
                                ^Sometimes you want to run jobs at regular times during normal business hours.                              
#+END_EXAMPLE

我遇到过一种情况每隔2/3/4个小时运行一次命令. 这可以通过在小时位置的值后面除于一个特定的间隔来实现, 例如 =*/3= 表示每三小时, =6-18/3= 表示在6 a.m 到 6 p.m 这个时间段内的没三个小时运行一次.
其他的间隔时间也类似; 例如, 分种位置的 =*/15= 表示 "每15分钟运行一次"

#+BEGIN_EXAMPLE
  ,*/5 08-18/2 * * * /usr/local/bin/mycronjob.sh
                            ^This cron job runs every five minutes during every hour between 8 a.m. and 5:58 p.m.                           
#+END_EXAMPLE

要注意一件事: job只会在除法表达式的结果余数为0的时候运行. 这也是为什么本例中job只会在8 a.m到6 p.m之间每个偶数小时内,每5分钟运行一次(08:05, 08:10, 08:15, 以此类推).
比如,该job就不会在 9 p.m 到 9:59 a.m之间运行.

我相信你应该能举一反三.

* Limiting cron access

允许cron的普通用户可能会犯错误,比如,可能会导致系统资源(内存，CPU之类)浪费. 
为了防止滥用,系统管理员可以限制哪些用户可以使用cron,方法是 创建一个 =/etc/cron.allow= 文件,里面包含所有允许创建cron job的用户.
不过root不能被禁止.

既然禁止了某些非root用户创建cron job的权限,那么root就有必要帮助他们在root的crontab中添加cron job.
"等会!" 你可能会大吃一惊. "这些job都以root用户来运行吗?" 当然不会. 本文第一个例子的注释中的用户名域可以用来指定运行job的用户ID.
这就预防了以root用户来运行那些非root用户的job. 下面例子中定义了一个job,它以"student"用户来运行:

#+BEGIN_EXAMPLE
  04 07 * * * student /usr/local/bin/mycronjob.sh
#+END_EXAMPLE

如果没有指定用户,那么job以crontab文件所有者的身份运行,本例中就是root.

* cron.d

有些应用，例如 [[http://spamassassin.apache.org/][SpamAssassin]] 和 [[https://github.com/sysstat/sysstat][sysstat]] 会在安装时生成一些cron文件到目录 =/etc/cron.d= 中. 
由于并不存在名为 =spamassassin= 和 =sysstat= 的用户,因此这些程序只能在 =/etc/cron.d= 中存放cron文件.

下面是 =/etc/cron.d/sysstat= 文件的内容,它包含了系统活动报告(SAR)相关的一些cron jobs. 这些cron文件的格式与用户cron文件一样.

#+BEGIN_EXAMPLE
  # Run system activity accounting tool every 10 minutes
  ,*/10 * * * * root /usr/lib64/sa/sa1 1 1
  # Generate a daily summary of process accounting at 23:53
  53 23 * * * root /usr/lib64/sa/sa2 -A
                           ^The sysstat package installs the /etc/cron.d/sysstat cron file to run programs for SAR.                         
#+END_EXAMPLE

这个sysstat cron 文件定义了两个任务. 第一行每10分钟运行一次 =sa1= 程序来收集存储在 =/var/log/sa= 目录下二进制文件中的数据.
然后每晚的23:53,运行 =sa2= 程序来生成每日汇总.

* Scheduling tips

我在crontab文件中设置的有些时间看起来似乎蛮随机的—某种程度上来说也确实如此. 
分配cron job是一件颇具挑战性的事情,尤其当有大量job需要分配时.
我在自己电脑上分配的任务并不多,比我在生产和实验环境中要简单一些.

我管理过一个系统，每天晚上有一打的cron job要运行,还有3,4个job会在周末和月首运行. 这真是个挑战, 如果有太多的job在同一时间运行的话—尤其做备份和编译时—系统内存将会耗尽并且填充完所有的交换文件,这会导致系统抖动,影响性能, 从而导致一事无成. 
我们后来增加了内存,改进了任务规划. 还移除了一个糟糕性能需要耗费巨量内存的任务.

crond服务假定宿主电脑是一直开机的. 也就是说，如果电脑在cron job本该运行的时刻关机了一段时间, 那么这些job只能在下次规划的时间才能再次运行.
如果这些cron job很关键的话，可能会引起一些问题. 幸运的是我们还有其他工具能让我们在特定间隔后运行jobs: anacron.

* anacron

[[https://en.wikipedia.org/wiki/Anacron][anacron]] 的功能与 =crond= 一样, 但是它可以运行那些被跳过的jobs(比如电脑被关机或者上个周期因为某些原因无法运行job). 
这对笔记本电脑以及其他经常会关机或进入休眠模式的电脑来说尤其有用.

电脑开机启动后, anacron会检查配置的任务在上轮规划中是否错过了运行. 如果是，那么这些任务会被立即运行, 但只会运行一次(不过实际错过了多少轮).
举个例子, 如果有个每周任务由于系统在你放假期间关机了导致三周都没有运行, 当你开机后，该任务会且仅会运行一次，而不是三次.

anacron 程序还提供了其他定义常规任务的方法. 只需要将你要运行的脚本根据间隔时间的需要放到 =/etc/cron.[hourly|daily|weekly|monthly]= 目录中即可. 
它的工作原理是什么? 过程要比看起来简单的多.

1. crond服务运行在 =/etc/cron.d/0hourly= 中指定的job.

   #+BEGIN_EXAMPLE
      # Run the hourly jobs
      SHELL=/bin/bash
      PATH=/sbin:/bin:/usr/sbin:/usr/bin
      MAILTO=root
      01 * * * * root run-parts /etc/cron.hourly
                           ^The contents of /etc/cron.d/0hourly cause the shell scripts located in /etc/cron.hourly to run.                     
   #+END_EXAMPLE

2. /etc/cron.d/0hourly中定义的cron job每个小时运行一次 =run-parts= 程序.
3. =run-parts= 程序运行 =/etc/cron.hourly= 目录中的所有脚本.
4. =/etc/cron.hourly= 目录中包含一个 =0anacron= 脚本, 该脚本使用 =/etdc/anacrontab= 配置文件运行 anacron 程序,配置文件内容为

   #+BEGIN_EXAMPLE
     # /etc/anacrontab: configuration file for anacron
     # See anacron(8) and anacrontab(5) for details.
     SHELL=/bin/sh
     PATH=/sbin:/bin:/usr/sbin:/usr/bin
     MAILTO=root
     # the maximal random delay added to the base delay of the jobs
     RANDOM_DELAY=45
     # the jobs will be started during the following hours only
     START_HOURS_RANGE=3-22
     #period in days   delay in minutes   job-identifier   command
     1       5       cron.daily              nice run-parts /etc/cron.daily
     7       25      cron.weekly             nice run-parts /etc/cron.weekly
     @monthly 45     cron.monthly            nice run-parts /etc/cron.monthly
         ^The contents of /etc/anacrontab file runs the executable files in the cron.[daily|weekly|monthly] directories at the appropriate times. 
   #+END_EXAMPLE


5. anacron程序每天运行一次 =/etc/cron.daily= 中的程序; 每周运行一次 =/etc/cron.weekly= 中的程序, 每月运行一次 =cron.monthly= 中的程序. 
   注意到，每行的延迟时间使得这些任务之间不会相互重叠.

我一般不把所有的Bash程序放到 =cron.X= 目录中,而是放到 =/usr/local/bin= 目录中, 这使得我可以方便地在命令行运行这些脚本. 
然后我再创建一个符号链接到合适的 cron 目录中(比如/etc/cron.daily中).

anacron 程序并不是设计来让程序在特定时间运行的. 相反, 它适用于从特定时间(比如每天3 a.m,每周日，每月的第一天)开始每隔一定时间运行一次程序.(参见上例中START_HOURS_RANGE这一行), on Sunday (to begin the week),
而且任何循环有缺失, anacron都会立即运行一次缺失的任务.

* More on setting limits

I use most of these methods for scheduling tasks to run on my computers. All those tasks are ones that need to run with root privileges.
It's rare in my experience that regular users really need a cron job. One case was a developer user who needed a cron job to kick off a
daily compile in a development lab.

It is important to restrict access to cron functions by non-root users. However, there are circumstances when a user needs to set a task
to run at pre-specified times, and cron can allow them to do that. Many users do not understand how to properly configure these tasks
using cron and they make mistakes. Those mistakes may be harmless, but, more often than not, they can cause problems. By setting
functional policies that cause users to interact with the sysadmin, individual cron jobs are much less likely to interfere with other
users and other system functions.

It is possible to set limits on the total resources that can be allocated to individual users or groups, but that is an article for
another time.

For more information, the man pages for [[http://man7.org/linux/man-pages/man8/cron.8.html][cron]], [[http://man7.org/linux/man-pages/man5/crontab.5.html][crontab]], [[http://man7.org/linux/man-pages/man8/anacron.8.html][anacron]], [[http://man7.org/linux/man-pages/man5/anacrontab.5.html][anacrontab]], and [[http://manpages.ubuntu.com/manpages/zesty/man8/run-parts.8.html][run-parts]] all have excellent information and descriptions
of how the cron system works.
