#+TITLE: 使用bash trap修改脚本应对信号的行为
#+URL: https://linuxconfig.org/how-to-modify-scripts-behavior-on-signals-using-bash-traps
#+AUTHOR: lujun9972
#+TAGS: raw
#+DATE: [2017-10-28 六 20:20]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil


* 简介

在编写长期运行的脚本时, 保证它的鲁棒性是很有必要的,这就需要能对系统信号产生反应执行特定的操作. 
我们可以使用bash内置的 =trap= 来做到这一点.

* 什么是trap?

trap 是bash提供的一种机制,它允许你自定义脚本在收到信号时的行为. 这项能力十分实用, 比如, 可以用它来保证系统的一致性(consistent state).
假设一个脚本在运行期间需要创建某些目录: 那么当发送 =SIGINT= 信号到该脚本后,该脚本会终止执行, 留下创建的目录没有被清理掉. 
而 =trap= 可以用来解决这样的问题.

* Trap语法

Trap 语法很简单易懂: 首先是 trap , 然后是要执行的动作, 然后指定要监听的信号:

#+BEGIN_SRC shell
  trap [-lp] [[arg] sigspec]
#+END_SRC

现在让我们来看看 =trap= 有哪些选项.

 -l 选项会让 =trap= 命令显示出一个信号以及对应编号的列表. 它看起来跟 =kill -l= 命令的执行结果类似:

#+BEGIN_EXAMPLE
  $ trap -l
  1) SIGHUP  2) SIGINT   3) SIGQUIT  4) SIGILL   5) SIGTRAP
  6) SIGABRT   7) SIGBUS   8) SIGFPE   9) SIGKILL 10) SIGUSR1
  11) SIGSEGV 12) SIGUSR2 13) SIGPIPE 14) SIGALRM 15) SIGTERM
  16) SIGSTKFLT 17) SIGCHLD 18) SIGCONT 19) SIGSTOP 20) SIGTSTP
  21) SIGTTIN 22) SIGTTOU 23) SIGURG  24) SIGXCPU 25) SIGXFSZ
  26) SIGVTALRM 27) SIGPROF 28) SIGWINCH  29) SIGIO 30) SIGPWR
  31) SIGSYS  34) SIGRTMIN  35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3
  38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8
  43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13
  48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12
  53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7
  58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2
  63) SIGRTMAX-1  64) SIGRTMAX
#+END_EXAMPLE

一定要记住, =trap= 只能对那些允许捕获的信号设置触发动作: SIGKILL 和 SIGSTOP 这两个信号则既不能捕获也不能忽略.

除了真实的信号之外, trap 还支持某些伪信号比如 EXIT, ERR 和 DEBUG, 具体细节我们后面再说. 
现在只需要记住,指定信号时既可以用信号的编号也可以用信号的名称来指定,而且用名称来指定信号时甚至可以省略前面的 =SIG=.

现在来说说 =-p= 选项. 该选项不能与出发信号后执行的命令一起使用(否则会报错). 它的作用是显示之前的trap设置. 
若指定了信号名称或者信号编号,则只会显示指定信号的相关设置,否则会显示所有的trap设置:

#+BEGIN_SRC shell
  $ trap 'echo "SIGINT caught!"' SIGINT
#+END_SRC

我们就为 =SIGINT= 信号设置了一个trap: 当脚本接受道指定信号时会在屏幕上显示出一条 "SIGINT caught" 信息. 
若我们现在使用 =-p= 参数调用trap, 则会显示刚才我们定义的那条trap信息:

#+BEGIN_EXAMPLE
  $ trap -p
  trap -- 'echo "SIGINT caught!"' SIGINT
#+END_EXAMPLE

而且,该trap现在是有效的, 若我们通过kill命令或者按下 =Ctrl-c= 发送一个 =SIGINT= 信号, 就会触发相关的命令:

#+BEGIN_EXAMPLE
  ^CSIGINT caught!
#+END_EXAMPLE

* Trap实战

我们现在来写一个简单的脚本来演示一下trap的用法:

#+BEGIN_SRC shell
  #!/usr/bin/env bash
  #
  # A simple script to demonstrate how trap works
  #
  set -e
  set -u
  set -o pipefail

  trap 'echo "signal caught, cleaning..."; rm -i linux_tarball.tar.xz' SIGINT SIGTERM

  echo "Downloading tarball..."
  wget -O linux_tarball.tar.xz https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.13.5.tar.xz &> /dev/null
#+END_SRC

上面脚本会尝试用wget下载最新的linux kernel tarball到本地目录. 在任务期间, 若收到了 SIGINT 或者 SIGTERM 信号(你可以在统一行指定不止一个信号), 则未下载完成的文件会被删除掉.

在这个例子中,信号触发的命令有两个: 第一个是 =echo= 命令将一段信息输出,第二个是 =rm= 命令 (我们带了 =-i= 选项, 因此在实际删除前rm会要求我们确认删除), 这两条命令之间用分号区分.
除了用这种方式指定多个命令外,你还可以调用函数: 这样可读性更强一些.
注意,如果你没有提供任何信号触发的命令,就表示忽略该信号!

该脚本运行期间收到 =SIGINT= 信号后会有如下输出:

#+BEGIN_EXAMPLE
  $ ./fetchlinux.sh
  Downloading tarball...
  ^Csignal caught, cleaning...
  rm: remove regular file 'linux_tarball.tar.xz'?

#+END_EXAMPLE

还有很重要的一点要注意,当脚本像上面那样被信号终止时, 它的退出码为128 + 信号编号的合. 
如你所见, 上面脚本被 =SIGINT= 终止后,其退出码为130:

#+BEGIN_EXAMPLE
  $ echo $?
  130
#+END_EXAMPLE

最后, 你可以通过 =trap= 后跟 =-= 符号, 再跟上信号名称或编号的方式来禁用trap:

#+BEGIN_EXAMPLE
  trap - SIGINT SIGTERM
#+END_EXAMPLE

会回复这两个信号最开始的作用.

* 伪信号

如前所述, trap不仅可以为可捕获的信号设置触发动作,还支持一些所谓的"伪信号". 严格来说他们并不是真正的信号,而是表示某种特定的状态:

** EXIT

在 =trap= 中指定 =EXIT=, 则trap中的命令会在退出shell时执行.

** ERR

当有命令返回非0状态码时触发, 但不包括以下几种情况(与shell的errexit选项一样): 检查的命令不能是 =until= 或 =while= 循环的一部分,不能使 =if= 语句的一部分,不能是 =&&= 和 =⎪⎪= 序列的一部分, 不能时命令的返回值由 =!= 翻转得到.

** DEBUG

在执行简单命令, =for=, =case=, =select= 命令, 执行函数的第一条命令之前触发操作.

** RETURN

当使用 =source= 或 =.= 命令执行函数或脚本后触发操作.
